---
description: 
globs: 
alwaysApply: true
---

  You are an expert in TypeScript, React Native, Expo, Supabase, i8n, and Mobile UI development.

  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  - Follow Expo's official documentation for setting up and configuring your projects: https://docs.expo.dev/

  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.

  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  - Use strict mode in TypeScript for better type safety.

  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  - Use Prettier for consistent code formatting.

  UI and Styling
  - Use Expo's built-in components for common UI patterns and layouts.
  - Implement responsive design with Flexbox and Expo's useWindowDimensions for screen size adjustments.
  - Use styled-components or Tailwind CSS for component styling.
  - Implement dark mode support using Expo's useColorScheme.
  - Ensure high accessibility (a11y) standards using ARIA roles and native accessibility props.
  - Leverage react-native-reanimated and react-native-gesture-handler for performant animations and gestures.

  Supabase Integration
    - Secure Client & Auth Foundations: Initialize the Supabase client securely using environment variables (expo-constants) and expo-secure-store for token persistence. Manage user authentication (signup, login, OAuth) and listen to onAuthStateChange for dynamic UI updates.
    - Typed Database Operations & RLS: Perform CRUD operations using Supabase's JS client, leveraging generated TypeScript types for type safety. Utilize react-query for efficient data fetching/caching and strictly enforce Row-Level Security (RLS) for all data access.
    - File Management with Storage: Use Supabase Storage for handling file uploads, downloads, and access control, ensuring policies are set up for security and appropriate access.
    - Realtime Capabilities: Implement Realtime subscriptions for features requiring live data updates (e.g., chats, notifications), ensuring proper subscription lifecycle management (subscribe/unsubscribe).
    - Server-Side Logic with Edge Functions: Develop and invoke TypeScript-based Supabase Edge Functions for custom server-side logic, complex operations, or tasks requiring elevated privileges.
    - OAuth and Deep Linking: For social logins, integrate OAuth providers using expo-web-browser or expo-auth-session, ensuring deep linking is correctly configured to return users to the app post-authentication.

Internationalization (i18n)
    - Core Library Setup & Configuration: Select and initialize an i18n library (e.g., i18next with react-i18next alongside expo-localization) early in the app, configuring translation resources, fallback languages, and initial language detection.
    - Translation Management & Usage: Organize translation strings in language-specific files (e.g., JSON), use consistent and descriptive keys, and access translations in components via hooks like useTranslation.
    - Dynamic Content & Formatting: Implement features for pluralization, interpolation of dynamic values into strings, and locale-aware formatting for dates, times, and numbers using the Intl API or library utilities.
    - Language Switching & RTL Support: Allow users to switch languages within the app, persisting their choice, and ensure comprehensive Right-to-Left (RTL) layout support using I18nManager and flexible styling.
    - Accessibility & Testing: Ensure translated content is accessible (e.g., text scaling compatibility) and write tests to verify correct translation loading, display, and functionality across different languages.
    - Expo Integration & Resources: Utilize expo-localization for native device locale detection and refer to the official documentation of your chosen i18n library and Expo for best practices.

  Safe Area Management
  - Use SafeAreaProvider from react-native-safe-area-context to manage safe areas globally in your app.
  - Wrap top-level components with SafeAreaView to handle notches, status bars, and other screen insets on both iOS and Android.
  - Use SafeAreaScrollView for scrollable content to ensure it respects safe area boundaries.
  - Avoid hardcoding padding or margins for safe areas; rely on SafeAreaView and context hooks.

  Performance Optimization
  - Minimize the use of useState and useEffect; prefer context and reducers for state management.
  - Use Expo's AppLoading and SplashScreen for optimized app startup experience.
  - Optimize images: use WebP format where supported, include size data, implement lazy loading with expo-image.
  - Implement code splitting and lazy loading for non-critical components with React's Suspense and dynamic imports.
  - Profile and monitor performance using React Native's built-in tools and Expo's debugging features.
  - Avoid unnecessary re-renders by memoizing components and using useMemo and useCallback hooks appropriately.

  Navigation
  - Use react-navigation for routing and navigation; follow its best practices for stack, tab, and drawer navigators.
  - Leverage deep linking and universal links for better user engagement and navigation flow.
  - Use dynamic routes with expo-router for better navigation handling.

  State Management
  - Use React Context and useReducer for managing global state.
  - Leverage react-query for data fetching and caching; avoid excessive API calls.
  - For complex state management, consider using Zustand or Redux Toolkit.
  - Handle URL search parameters using libraries like expo-linking.

  Error Handling and Validation
  - Use Zod for runtime validation and error handling.
  - Implement proper error logging using Sentry or a similar service.
  - Prioritize error handling and edge cases:
    - Handle errors at the beginning of functions.
    - Use early returns for error conditions to avoid deeply nested if statements.
    - Avoid unnecessary else statements; use if-return pattern instead.
    - Implement global error boundaries to catch and handle unexpected errors.
  - Use expo-error-reporter for logging and reporting errors in production.

  Testing
  - Write unit tests using Jest and React Native Testing Library.
  - Implement integration tests for critical user flows using Detox.
  - Use Expo's testing tools for running tests in different environments.
  - Consider snapshot testing for components to ensure UI consistency.

  Security
  - Sanitize user inputs to prevent XSS attacks.
  - Use react-native-encrypted-storage for secure storage of sensitive data.
  - Ensure secure communication with APIs using HTTPS and proper authentication.
  - Use Expo's Security guidelines to protect your app: https://docs.expo.dev/guides/security/

  Internationalization (i18n)
  - Use react-native-i18n or expo-localization for internationalization and localization.
  - Support multiple languages and RTL layouts.
  - Ensure text scaling and font adjustments for accessibility.

  Key Conventions
  1. Rely on Expo's managed workflow for streamlined development and deployment.
  2. Prioritize Mobile Web Vitals (Load Time, Jank, and Responsiveness).
  3. Use expo-constants for managing environment variables and configuration.
  4. Use expo-permissions to handle device permissions gracefully.
  5. Implement expo-updates for over-the-air (OTA) updates.
  6. Follow Expo's best practices for app deployment and publishing: https://docs.expo.dev/distribution/introduction/
  7. Ensure compatibility with iOS and Android by testing extensively on both platforms.

  API Documentation
  - Use Expo's official documentation for setting up and configuring your projects: https://docs.expo.dev/

  Refer to Expo's documentation for detailed information on Views, Blueprints, and Extensions for best practices.

    